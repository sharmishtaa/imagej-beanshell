/**
 * Aligns a pair of overlapping projects
 * Call
 *
 * xvfb-run ./ImageJ-linux64 -Ddir1=<project1 directory> -Ddir2=<project2 directory> -- --no-splash align-overlaping-projects.bsh
 *
 * @author Stephan Saalfeld <saalfeld@mpi-cbg.de>
 *
 * modified by Yang Li
 * Russel Torres
 * Sharmishtaa Seshamani
 */

import ini.trakem2.ControlWindow;
import ini.trakem2.Project;
import ini.trakem2.display.Layer;
import ini.trakem2.display.Patch;
import ij.IJ;
import ij.ImagePlus;
import ij.process.ImageProcessor;
import java.awt.geom.AffineTransform;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import mpicbg.ij.TransformMeshMapping;
import mpicbg.models.CoordinateTransformMesh;
import mpicbg.models.InterpolatedCoordinateTransform;
import mpicbg.models.Point;
import mpicbg.models.PointMatch;
import mpicbg.trakem2.transform.RigidModel2D;
import mpicbg.trakem2.transform.TranslationModel2D;
import mpicbg.trakem2.util.Pair;

double sampleSpacing = 100.0;

Project tryOpenProject(path) {
	Exception f = null;
	for (int i = 0; i < 10; ++i) {
		try {
			project = Project.openFSProject(path, false);
			if (project != null)
				return project;
		}
		catch (e) {
			f = e;
			f.printStackTrace();
		}
		System.out.println("Trial " + i + ", failed to open project \"" + path + "\".");
		Thread.sleep(1000);
	}
	if (f == null)
		return null;
	else
		throw f;
}

boolean saveTransform(path, transform) {
	try {
		fos = new FileOutputStream(path);
		out = new OutputStreamWriter(fos, "UTF-8");
		dataString = transform.toDataString();
		out.write(dataString, 0, dataString.length() );
		out.close();
		return true;
	}
	catch (e) {
		return false;
	}
}

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

dir1 = System.getProperty("dir1");
dir2 = System.getProperty("dir2");

ControlWindow.setGUIEnabled(false);

project1 = tryOpenProject(dir1 + "/intersection_Affine.xml");
project2 = tryOpenProject(dir2 + "/intersection_Affine.xml");
layerset1 = project1.getRootLayerSet();
layerset2 = project2.getRootLayerSet();

matches = new ArrayList();
for (layer1 : layerset1.getLayers()) {
	for (layer2 : layerset2.getLayers()) {
		if (layer1.getZ() == layer2.getZ()) {

			System.out.println("layer " + layer1.getZ());

      // get patches with corresponding titles
			for (p1: layer1.getDisplayables(Patch.class)){
				for (p2: layer2.getDisplayables(Patch.class)) {
					
					String s0 = Patch.class.getSimpleName();
					String s1 = p1.getClass().getSimpleName();
					String s2 = p2.getClass().getSimpleName();
					System.out.println(s0);
					System.out.println(s1);	
					System.out.println(s2);

					if (s1.equals(s0))
					{
				

					String t1 = p1.getTitle();
					String t2 = p2.getTitle();
					System.out.println(t1);
					System.out.println(t2);	
					
					
					//if ((p1.getClass().getSimpleName().equals(Patch.class)) & (p2.getClass().getSimpleName().equals(Patch.class)))
					//{
					if (s1.equals(s2))
					if (t1.equals(t2)){
					
					//if (p1.getTitle().equals(p2.getTitle())){
					//if (t1==t2){
						
						System.out.println("Getting matches for " + t1);
						System.out.println("Getting matches for " + t2);
						
						// all inclusive CT
						ct1 = p1.getFullCoordinateTransform();
						ct2 = p2.getFullCoordinateTransform();

						System.out.println(p1.getTitle());						
						System.out.println(p2.getTitle());
						System.out.println(ct1);
						System.out.println(ct2);

						// Generate samples
						w = p1.getOWidth();
						h = p1.getOHeight();
						System.out.println("generating samples");
						for (double y = 0; y < h; y += sampleSpacing) {
							for (double x = 0; x < w; x += sampleSpacing) {
								p = new Point(new double[]{(double)x, (double)y });
								pw = p.getW();
								p.apply(ct1);
								p1 = new Point(new double[]{pw[0], pw[1]});
								p.apply(ct2);
								p2 = new Point(new double[]{pw[0], pw[1]});
								matches.add(new PointMatch(p2, p1));
							}
						}
						System.out.println("End for....");
					}
					System.out.println("End if....");
				}
				}
			}
			break; // only one layer match
		}
	}
}

/* estimate pairwise transformation model */
model = new RigidModel2D();
//model = new TranslationModel2D();
model.fit(matches);

/* try to save transform */
for (i = 0; i < 10 && !saveTransform(dir2 + "/rigid.txt", model); ++i)
	Thread.sleep(1000);

project1.destroy();
project2.destroy();


/* shutdown */
System.exit(0);
runtime.exit(0);
