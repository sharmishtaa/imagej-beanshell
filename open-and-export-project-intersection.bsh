/**
 * Call
 *
 * xvfb-run -a ./ImageJ-linux64 -Ddir1=<project1 directory> -Ddir2=<project2 directory> -Dexport=<export directory>  -- --no-splash open-and-export-project-intersection.bsh
 * 
 * @author Stephan Saalfeld <saalfeld@mpi-cbg.de>
 */

import ini.trakem2.ControlWindow;
import ini.trakem2.Project;
import ini.trakem2.display.Layer;
import ini.trakem2.display.Patch;
import ij.IJ;
import ij.ImagePlus;
import ij.process.ImageProcessor;
import java.lang.Runtime;
import java.util.ArrayList;
import mpicbg.ij.TransformMeshMapping;
import mpicbg.models.CoordinateTransformMesh;
import mpicbg.models.InterpolatedCoordinateTransform;
import mpicbg.trakem2.util.Pair;


import java.io.Writer;
import java.io.FileWriter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import com.thoughtworks.xstream.XStream;
import java.io.IOException;


	public static boolean writeObjectToFileXstream(Object o,String path) {

      //filename is filepath string
       try {
            File file = new File(path);
            file.getParentFile().mkdirs();
            Writer writer = new FileWriter(file);
            XStream xstream=new XStream();
            writer.write(xstream.toXML(o));
            writer.close();
        }
        catch (  IOException e )
        {
            System.err.println( "Error writing JSON file: " + path );
            e.printStackTrace( System.err );
        } 
        catch ( Exception e){
            e.printStackTrace();
            return false;
        }
        return true;

  }

	public static boolean writeObjectToFile(Object o,String path) {

      //filename is filepath string
       try {
            File file = new File(path);
            file.getParentFile().mkdirs();
            Writer writer = new FileWriter(file);
            //Gson gson = new GsonBuilder().create();
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            gson.toJson(o, writer);
            writer.close();
        }
        catch (  IOException e )
        {
            System.err.println( "Error writing JSON file: " + path );
            e.printStackTrace( System.err );
        } 
    
        catch ( Exception e){
            e.printStackTrace();
            return false;
        }
        return true;

  }
  


int meshResolution = 128;

runtime = Runtime.getRuntime();
System.out.println( runtime.availableProcessors() + " cores available for multi-threading" );

dir1 = System.getProperty("dir1");
dir2 = System.getProperty("dir2");
export = System.getProperty("export");

ControlWindow.setGUIEnabled(false);
project1 = Project.openFSProject(dir1 + "/project.xml", false);
project2 = Project.openFSProject(dir2 + "/project.xml", false);
layerset1 = project1.getRootLayerSet();
layerset1.setSnapshotsMode(1);
layerset2 = project2.getRootLayerSet();
layerset2.setSnapshotsMode(1);

box = layerset1.get2DBounds().union(layerset2.get2DBounds());



/* put corresponding layers into a list of Pairs */
pairs = new ArrayList();
for (layer1 : layerset1.getLayers()) {
	for (layer2 : layerset2.getLayers()) {
		if (layer1.getZ() == layer2.getZ()) {
			pairs.add(new Pair((Object)layer1, (Object)layer2));
			break;
		}
	}
}

/* render layers with interpolated transformations */
/* TODO do it for more than a single patch per layer */
for (int i = 0; i < pairs.size(); ++i) {
	pair = pairs.get(i);
//	float lambda = (i + 1.0f) / (pairs.size() + 1.0f);	// for a transition range between two standalone projects
	float lambda = (float)i / (float)pairs.size();		// for series of adjacent transition ranges
	System.out.println("(" + pairs.get(i).a.getZ() + ", " + pairs.get(i).b.getZ() + ") : " + lambda);
	
	/* corresponding patches */
	p1 = pair.a.getDisplayables(Patch.class).get(0);
	p2 = pair.b.getDisplayables(Patch.class).get(0);
	
	/* all inclusive CoordinateTransform */
	ct1 = p1.getFullCoordinateTransform();
	ct2 = p2.getFullCoordinateTransform();
	
	/* interpolant */
	ct = new InterpolatedCoordinateTransform(ct1, ct2, lambda);
	
	/* get the pixels */
	ip = p1.getImageProcessor();
	ip.setInterpolationMethod(ImageProcessor.BILINEAR);
	ipExport = ip.createProcessor(box.width, box.height);
	
	/* render */
	mesh = new CoordinateTransformMesh(ct, meshResolution, ip.getWidth(), ip.getHeight());
	mapping = new TransformMeshMapping(mesh);
	mapping.mapInterpolated(ip, ipExport);
	
	
	/* save */
	imp = new ImagePlus( "", ipExport );
	IJ.save(imp, export + "/" + p1.getTitle() + ".tif");
	
	//writeObjectToFile(ct,export + "/" +p1.getTitle() + ".xml");
	writeObjectToFileXstream(ct,export + "/" +p1.getTitle() + ".xml");
	//saveTransform(export + "/" + p1.getTitle() + ".xml",ct,box);
	
	
}
//writeObjectToFile(box,export + "/boundbox.xml");
writeObjectToFileXstream(box,export + "/boundbox.xml");


/* shutdown */
runtime.exit(0);

